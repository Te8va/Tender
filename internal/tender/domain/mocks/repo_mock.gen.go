// Code generated by MockGen. DO NOT EDIT.
// Source: git.codenrock.com/cnrprod1725727333-user-88349/zadanie-6105/internal/tender/domain (interfaces: TenderRepositoryGetter)

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	reflect "reflect"

	domain "github.com/Te8va/Tender/internal/tender/domain"
	gomock "github.com/golang/mock/gomock"
)

// MockTenderRepositoryGetter is a mock of TenderRepositoryGetter interface.
type MockTenderRepositoryGetter struct {
	ctrl     *gomock.Controller
	recorder *MockTenderRepositoryGetterMockRecorder
}

// MockTenderRepositoryGetterMockRecorder is the mock recorder for MockTenderRepositoryGetter.
type MockTenderRepositoryGetterMockRecorder struct {
	mock *MockTenderRepositoryGetter
}

// NewMockTenderRepositoryGetter creates a new mock instance.
func NewMockTenderRepositoryGetter(ctrl *gomock.Controller) *MockTenderRepositoryGetter {
	mock := &MockTenderRepositoryGetter{ctrl: ctrl}
	mock.recorder = &MockTenderRepositoryGetterMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockTenderRepositoryGetter) EXPECT() *MockTenderRepositoryGetterMockRecorder {
	return m.recorder
}

// CreateTender mocks base method.
func (m *MockTenderRepositoryGetter) CreateTender(arg0 context.Context, arg1 domain.Tender) (domain.Tender, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateTender", arg0, arg1)
	ret0, _ := ret[0].(domain.Tender)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateTender indicates an expected call of CreateTender.
func (mr *MockTenderRepositoryGetterMockRecorder) CreateTender(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateTender", reflect.TypeOf((*MockTenderRepositoryGetter)(nil).CreateTender), arg0, arg1)
}

// GetTender mocks base method.
func (m *MockTenderRepositoryGetter) GetTender(arg0 context.Context) ([]domain.Tender, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetTender", arg0)
	ret0, _ := ret[0].([]domain.Tender)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetTender indicates an expected call of GetTender.
func (mr *MockTenderRepositoryGetterMockRecorder) GetTender(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetTender", reflect.TypeOf((*MockTenderRepositoryGetter)(nil).GetTender), arg0)
}

// GetTenderByID mocks base method.
func (m *MockTenderRepositoryGetter) GetTenderByID(arg0 context.Context, arg1 string) (domain.Tender, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetTenderByID", arg0, arg1)
	ret0, _ := ret[0].(domain.Tender)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetTenderByID indicates an expected call of GetTenderByID.
func (mr *MockTenderRepositoryGetterMockRecorder) GetTenderByID(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetTenderByID", reflect.TypeOf((*MockTenderRepositoryGetter)(nil).GetTenderByID), arg0, arg1)
}

// RollbackTenderVersion mocks base method.
func (m *MockTenderRepositoryGetter) RollbackTenderVersion(arg0 context.Context, arg1 string, arg2 int) (domain.Tender, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RollbackTenderVersion", arg0, arg1, arg2)
	ret0, _ := ret[0].(domain.Tender)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// RollbackTenderVersion indicates an expected call of RollbackTenderVersion.
func (mr *MockTenderRepositoryGetterMockRecorder) RollbackTenderVersion(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RollbackTenderVersion", reflect.TypeOf((*MockTenderRepositoryGetter)(nil).RollbackTenderVersion), arg0, arg1, arg2)
}

// UpdatePartTender mocks base method.
func (m *MockTenderRepositoryGetter) UpdatePartTender(arg0 context.Context, arg1 string, arg2 map[string]interface{}) (domain.Tender, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdatePartTender", arg0, arg1, arg2)
	ret0, _ := ret[0].(domain.Tender)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdatePartTender indicates an expected call of UpdatePartTender.
func (mr *MockTenderRepositoryGetterMockRecorder) UpdatePartTender(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdatePartTender", reflect.TypeOf((*MockTenderRepositoryGetter)(nil).UpdatePartTender), arg0, arg1, arg2)
}

// UpdateTenderStatus mocks base method.
func (m *MockTenderRepositoryGetter) UpdateTenderStatus(arg0 context.Context, arg1, arg2 string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateTenderStatus", arg0, arg1, arg2)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateTenderStatus indicates an expected call of UpdateTenderStatus.
func (mr *MockTenderRepositoryGetterMockRecorder) UpdateTenderStatus(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateTenderStatus", reflect.TypeOf((*MockTenderRepositoryGetter)(nil).UpdateTenderStatus), arg0, arg1, arg2)
}
